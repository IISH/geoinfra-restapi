#!/bin/bash
#
# tar-gz.sh
#
# Downloads the website instance if it has a change in it's Last-Modified HTTP header.
#
# Author: Lucien van Wouw <lwo@iisg.nl>



# change_last_lastmodified_datestamp
#
# Compared the Last-Modified header on the bamboo server with a cached one.
# If these differ, remove the cached value to tricker a bamboo installation event..
#
# Parameters:
# $1 = the key ( the instance of the project to install)
# $2 = The url
# $3 = the absolute folder to download into
# $4 = nocache: optional to ignore the last modified datestamp.
#
# Returns: exit 1 if no download was required; -1 for an error.


function change_last_modified_datestamp() {


    # continue in the opt folder
    if [ ! -d /opt ] ; then
        mkdir /opt
    fi

    cd /opt

    instance=$1
    url=$2
    location=$3
    nocache="$4"

    echo "instance=${instance}"
    echo "url=${url}"
    echo "location=${location}"
    echo "nocache=${nocache}"

    lm=/opt/$instance.txt
    downloaded_tarball=$url

    if [ ! -d $location ] ; then
        echo "Creating ${location}"
        mkdir -p $location
    fi

    # Get the last modified date from bamboo. Trim the string.
    last_modified_bamboo=$(wget --spider -S --no-check-certificate "$downloaded_tarball" 2>&1 | grep "Last-Modified" | sed -e 's/^ *//g' -e 's/ *$//g')
    rc=$?
    if [[ $rc != 0 ]] ; then
            printf "There was an invalid response when sending a request to ${downloaded_tarball}"
            exit -1
    fi

    if [ -z "$last_modified_bamboo" ] ; then
        printf "There was no Last-Modified header in the response from ${downloaded_tarball}"
        exit -1
    fi

    # Compare it with the stored version
    if [ "$nocache" != "nocache" ] && [ -f $lm ] ; then
        last_modified_cache=$(cat $lm)
        if [ "$last_modified_bamboo" == "$last_modified_cache" ] ; then
                printf "No change. Last-Modified: ${last_modified_bamboo}\n"
                exit 0
        else
            printf "The Last-Modified headers differ:\n'${last_modified_bamboo}'\n'${last_modified_cache}'\n"
        fi
    else
        printf "There is no cached datestamp or installed instance at ${location}.\n"
    fi


    # Overwrite the Last Modified datestamp so we will not tricker another installation.
    echo $last_modified_bamboo > $lm

    if [ -f $instance ] ; then
        rm $instance
    fi
    wget -O $instance --no-check-certificate "$downloaded_tarball"
    rc=$?
    if [[ $rc != 0 ]] ; then
        printf "There was a problem downloading the instance from ${downloaded_tarball}"
        rm $lm
        exit -1
    fi

    if [ ! -f $instance ] ; then
        echo "No file ${instance} was downloaded from ${downloaded_tarball}"
        rm $lm
        exit -1
    fi

    # If needed unpack
    # We add exclude filters for known instance types:
    # - sites/default/files
    /bin/tar -xvzf $instance

    content=$(tar -tzf $instance | sed -e 's@/.*@@' | uniq)
    if [ -z "$content" ] ; then
        echo "No content in package ${instance}"
        exit -1
    fi

    # Ensure ownership and permissions
    <% if @owner %>chown -R <%owner%> $content<% end %>


    # Copy the site files
    /usr/bin/rsync --del -av <%= @rsync_exclude %> $content/. $location
    /bin/rm -f /opt/$content
    /bin/rm -fr /opt/$content

<% if @command %><%= @command %><% end %>

exit 0

}


main() {

    if [ -z "$1" ] ; then
        echo "The instance is not set."
        exit -1
    fi

    if [ -z "$2" ] ; then
        echo "The url is not set."
        exit -1
    fi

    if [ -z "$3" ] ; then
        echo "The location for the installation is not set."
        exit -1
    fi

    change_last_modified_datestamp "$@"

    exit 0
}

main "$@"